# Server port is arbitrary
server.port=8082

# Data Source Setup
# Note: Users must create a mysql db that they will reference here, create a user that has access to it on localhost
#       and provide the credentials below to access it
spring.datasource.url=jdbc:mysql://localhost:3306/critter_chronologer_schema
spring.datasource.username=critteruser
spring.datasource.password=ThePassword@1

# todo: change the strategy later
spring.jpa.hibernate.ddl-auto=create-drop

# uncomment the below lines to view sql output in console
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#debug=true
#trace=true
spring.output.ansi.enabled=always

#You must begin with either create or update, because you do not yet have the database structure. After the first run, you can switch it to update or none, according to program requirements. Use update when you want to make some change to the database structure.
#
#The default for H2 and other embedded databases is create-drop. For other databases, such as MySQL, the default is none.
#It is a good security practice to, after your database is in a production state, set this to none, revoke all privileges from the MySQL user connected to the Spring application, and give the MySQL user only SELECT, UPDATE, INSERT, and DELETE. You can read more about this at the end of this guide.
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example
#
#Make Some Security Changes
#
#When you are on a production environment, you may be exposed to SQL injection attacks. A hacker may inject DROP TABLE or any other destructive SQL commands. So, as a security practice, you should make some changes to your database before you expose the application to your users.
#
#The following command revokes all the privileges from the user associated with the Spring application:
#
#mysql> revoke all on db_example.* from 'springuser'@'%';
#
#Now the Spring application cannot do anything in the database.
#
#The application must have some privileges, so use the following command to grant the minimum privileges the application needs:
#
#mysql> grant select, insert, delete, update on db_example.* to 'springuser'@'%';
#
#Removing all privileges and granting some privileges gives your Spring application the privileges necessary to make changes to only the data of the database and not the structure (schema).
#
#When you want to make changes to the database:
#
#Regrant permissions.
#
#Change the spring.jpa.hibernate.ddl-auto to update.
#
#Re-run your applications.
#
#Then repeat the two commands shown here to make your application safe for production use again. Better still, use a dedicated migration tool, such as Flyway or Liquibase.
